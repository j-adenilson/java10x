package EstruturaDeDados;

public class GarbageCollecttor {
    public static void main(String[] args){

        String[] ninjas = new String[5];
        ninjas[0] = "Naruto Uzumaki";
        ninjas[1] = "Sasuke Uchiha";
        ninjas[3] = "Sakura Haruno";
        ninjas[4] = "Rock Lee";

        ninjas = new String[5];
        ninjas[0] = "Hashirama Senju";
        ninjas[1] = "Tobirama Senju";
        ninjas[2] = "Hiruzen Sarutobi";
        ninjas[3] = "Minato Namikaze";
        ninjas[4] = "Tsunade";

        for (int i = 0; i < 5; i++) {
            System.out.println(ninjas[i]);
        }

        /*
        Arrays + Introdu√ß√£o ao Garbage Collecttorüçç
Arrays em Programa√ß√£o
Arrays s√£o estruturas de dados usadas para armazenar m√∫ltiplos valores em uma √∫nica vari√°vel. Cada valor √© acessado por um √≠ndice num√©rico, come√ßando do zero.

Por exemplo:

    int[] numeros = {1, 2, 3, 4, 5};
Redeclara√ß√£o de Arrays
Em muitas linguagens de programa√ß√£o, uma vez que um array √© declarado, voc√™ pode atribuir novos valores, mas n√£o pode redeclar√°-lo diretamente sem perder os dados atuais.

Por exemplo, se voc√™ tentar redeclarar um array j√° existente, voc√™ ir√° sobrescrever o array anterior:

    int[] numeros = {1, 2, 3};
    numeros = new int[]{4, 5, 6};
<!-- Redeclara√ß√£o -->
Introdu√ß√£o ao Garbage Collection
Garbage Collection (GC) √© o processo autom√°tico de gerenciamento de mem√≥ria, onde objetos que n√£o est√£o mais em uso s√£o removidos da mem√≥ria. Isso ajuda a evitar vazamentos de mem√≥ria.

O Garbage Collector monitora objetos que n√£o t√™m mais refer√™ncias ativas e os limpa da mem√≥ria.

    // Exemplo de objeto n√£o mais referenciado:
    MinhaClasse obj = new MinhaClasse();
    obj = null;  // O objeto anterior √© agora eleg√≠vel para GC
O Garbage Collection √© especialmente importante em linguagens como Java e C#, onde a mem√≥ria √© gerenciada automaticamente.
* */
    }
}
