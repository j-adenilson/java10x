package EstruturaDeDados;

public class InicializacaoDeArray {
    public static void main(String[] args){

        String[] ninjas = new String[5];
        ninjas[0] = "Naruto Uzumaki";
        ninjas[1] = "Sasuke Uchiha";
        ninjas[3] = "Sakura Haruno";
        ninjas[4] = "Rock Lee";
        ninjas[5] = "Kakashi Hatake";

        int[] idade = new int[5];
        idade[0] = 16;
        idade[1] = 17;
        idade[2] = 16;




        /*
        Objetos de memoria + Inicializa√ß√£o de Array üçç
Ao trabalhar com arrays em Java, √© importante entender o comportamento dos objetos de mem√≥ria e a inicializa√ß√£o padr√£o de seus elementos. Quando um array √© criado, seus valores s√£o automaticamente inicializados de acordo com o tipo de dado que ele armazena. Para tipos primitivos como int, double ou boolean, os valores padr√£o s√£o 0, 0.0 e false, respectivamente. J√° para objetos como String ou outros tipos de refer√™ncia, o valor padr√£o √© null.

Conceitos sobre Objetos de Mem√≥ria e Inicializa√ß√£o de Arrays
Mem√≥ria de Arrays: Em Java, os arrays s√£o armazenados na mem√≥ria heap, pois s√£o objetos. Isso significa que o array em si √© uma refer√™ncia, enquanto seus elementos podem ser tipos primitivos ou objetos, dependendo do tipo definido.
Valores Padr√£o: Quando um array √© criado, cada elemento √© inicializado automaticamente com um valor padr√£o. Esses valores dependem do tipo de dado do array. Para tipos primitivos, como int, o valor √© 0, e para double, √© 0.0. Para objetos, o valor inicial √© null.
√çndices e Acesso: Como em todo array, os elementos s√£o acessados por seus √≠ndices, come√ßando em 0. Se tentarmos acessar um √≠ndice que n√£o foi inicializado com um valor expl√≠cito, veremos o valor padr√£o do tipo de dado correspondente.
Exemplos de Inicializa√ß√£o de Arrays
Array de inteiros: Um array de inteiros (int[]) √© inicializado com zeros. Se criarmos um array de tamanho 5, ele ter√° a seguinte configura√ß√£o: [0, 0, 0, 0, 0].
Array de booleanos: Da mesma forma, um array de booleanos (boolean[]) ser√° inicializado com false, como [false, false, false, false].
Array de objetos: Se criarmos um array de Strings (String[]), por exemplo, cada elemento ser√° inicializado como null at√© que seja atribu√≠do um valor espec√≠fico: [null, null, null].
Considera√ß√µes sobre Inicializa√ß√£o
Inicializa√ß√£o Impl√≠cita: Quando o array √© declarado, os valores s√£o automaticamente atribu√≠dos com base em seu tipo, economizando a necessidade de inicializar cada elemento individualmente.
Inicializa√ß√£o Expl√≠cita: √â poss√≠vel inicializar o array com valores espec√≠ficos no momento de sua cria√ß√£o, como int[] numeros = {1, 2, 3, 4};. Isso evita o uso dos valores padr√µes
*/



    }
}
